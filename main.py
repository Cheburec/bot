import json
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.client.default import DefaultBotProperties

BOT_TOKEN = '8432535237:AAG4S7wyvrOMQe-GpGxXSBhozy10jxkWTEo'

# ID –≥—Ä—É–ø–ø—ã –∏ —Ç–µ–º—ã —Ñ–æ—Ä—É–º–∞
PARTY_GROUP_ID = -1002855678816
TOPIC_ID = 45  # ID —Ç–µ–º—ã —Ñ–æ—Ä—É–º–∞

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

# ---------- –°–û–°–¢–û–Ø–ù–ò–Ø ----------
class ProfileForm(StatesGroup):
    position = State()
    mmr = State()
    dota_id = State()
    politeness = State()
    honesty = State()

# ---------- –•–†–ê–ù–ò–õ–ò–©–ï ----------
def load_profiles():
    try:
        with open("profiles.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def save_profiles(profiles):
    with open("profiles.json", "w", encoding="utf-8") as f:
        json.dump(profiles, f, ensure_ascii=False, indent=4)

# ---------- –ö–†–ê–°–ò–í–´–ô –ü–†–û–§–ò–õ–¨ ----------
def format_profile(profile):
    dota_id = profile["dota_id"]
    dotabuff_url = f"https://www.dotabuff.com/players/{dota_id}"
    opendota_url = f"https://www.opendota.com/players/{dota_id}"
    return (
        f"<b>üéÆ Dota –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"üë§ <b>–ò–º—è:</b> @{profile.get('username', '‚Äî')}\n"
        f"üÜî <b>Dota ID:</b> <code>{dota_id}</code> "
        f"<a href='{dotabuff_url}'>Dotabuff</a> | <a href='{opendota_url}'>OpenDota</a>\n"
        f"üèÜ <b>MMR:</b> {profile['mmr']}\n"
        f"ü§ù <b>–ü–æ—Ä—è–¥–æ—á–Ω–æ—Å—Ç—å:</b> {profile['honesty']} | üòä <b>–í–µ–∂–ª–∏–≤–æ—Å—Ç—å:</b> {profile['politeness']}\n"
        f"üïπ <b>–†–æ–ª–∏:</b> {profile['position']}"
    )

# ---------- –†–û–õ–ò ----------
positions = ["–ø–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "—Å–ª–æ–∂–Ω–∞—è", "—Ü–µ–Ω—Ç—Ä", "–ª—ë–≥–∫–∞—è"]

def get_positions_keyboard(selected_roles=None):
    selected_roles = selected_roles or []
    buttons = []
    for pos in positions:
        text = f"{'‚úÖ ' if pos in selected_roles else ''}{pos}"
        buttons.append([InlineKeyboardButton(text=text, callback_data=f"position_toggle:{pos}")])
    buttons.append([InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="position_done")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# ---------- –ü–†–û–§–ò–õ–¨ (INLINE) ----------
def profile_menu():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile")],
            [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="clear_profile")]
        ]
    )

# ---------- –ù–ò–ñ–ù–ï–ï –ú–ï–ù–Æ ----------
bottom_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="–ù–∞–π—Ç–∏ –ø–∞—Ç–∏")]
    ],
    resize_keyboard=True
)

# ---------- /start ----------
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.update_data(selected_roles=[])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–æ–ª–µ–π:", reply_markup=get_positions_keyboard())
    await message.answer("–ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π:", reply_markup=bottom_menu)
    await state.set_state(ProfileForm.position)

# ---------- –í–´–ë–û–† –†–û–õ–ï–ô ----------
@dp.callback_query(lambda c: c.data.startswith("position_toggle:") or c.data == "position_done")
async def choose_positions(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_roles = data.get("selected_roles", [])

    if callback.data.startswith("position_toggle:"):
        pos = callback.data.split(":", 1)[1]
        if pos in selected_roles:
            selected_roles.remove(pos)
        else:
            selected_roles.append(pos)
        await state.update_data(selected_roles=selected_roles)
        await callback.message.edit_reply_markup(reply_markup=get_positions_keyboard(selected_roles))
        await callback.answer()
    elif callback.data == "position_done":
        if not selected_roles:
            await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–æ–ª—å!")
            return
        await state.update_data(position=", ".join(selected_roles))
        await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª–∏: {', '.join(selected_roles)}")
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π MMR (—á–∏—Å–ª–æ):")
        await state.set_state(ProfileForm.mmr)
        await callback.answer()

# ---------- –°–û–ó–î–ê–ù–ò–ï –ü–†–û–§–ò–õ–Ø ----------
@dp.message(ProfileForm.mmr)
async def set_mmr(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("MMR –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    await state.update_data(mmr=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π Dota ID (—á–∏—Å–ª–æ):")
    await state.set_state(ProfileForm.dota_id)

@dp.message(ProfileForm.dota_id)
async def set_dota_id(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("Dota ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    await state.update_data(dota_id=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ–∂–ª–∏–≤–æ—Å—Ç–∏ (0‚Äì12000):")
    await state.set_state(ProfileForm.politeness)

@dp.message(ProfileForm.politeness)
async def set_politeness(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or not (0 <= int(message.text) <= 12000):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 12000.")
        return
    await state.update_data(politeness=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—è–¥–æ—á–Ω–æ—Å—Ç–∏ (0‚Äì12000):")
    await state.set_state(ProfileForm.honesty)

@dp.message(ProfileForm.honesty)
async def set_honesty(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or not (0 <= int(message.text) <= 12000):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 12000.")
        return
    await state.update_data(honesty=int(message.text))
    data = await state.get_data()

    profiles = load_profiles()
    profiles = [p for p in profiles if p["user_id"] != message.from_user.id]

    profile = {
        "user_id": message.from_user.id,
        "username": message.from_user.username,
        **data
    }

    profiles.append(profile)
    save_profiles(profiles)

    await message.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=bottom_menu)
    await message.answer(format_profile(profile), reply_markup=profile_menu())
    await state.clear()

# ---------- –ü–û–ö–ê–ó –ü–†–û–§–ò–õ–Ø ----------
@dp.message(Command("–ø—Ä–æ—Ñ–∏–ª—å"))
async def show_profile(message: types.Message):
    profiles = load_profiles()
    profile = next((p for p in profiles if p["user_id"] == message.from_user.id), None)
    if not profile:
        await message.answer("üòï –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /start, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.")
        return
    await message.answer(format_profile(profile), reply_markup=profile_menu())

# ---------- –ù–ò–ñ–ù–ï–ï –ú–ï–ù–Æ ----------
@dp.message()
async def bottom_menu_handler(message: types.Message):
    if message.text == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        profiles = load_profiles()
        profile = next((p for p in profiles if p["user_id"] == message.from_user.id), None)
        if not profile:
            await message.answer("üòï –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /start, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.")
            return
        await message.answer(format_profile(profile), reply_markup=profile_menu())

    elif message.text == "–ù–∞–π—Ç–∏ –ø–∞—Ç–∏":
        profiles = load_profiles()
        profile = next((p for p in profiles if p["user_id"] == message.from_user.id), None)
        if not profile:
            await message.answer("üòï –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π –µ–≥–æ —á–µ—Ä–µ–∑ /start.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
        delete_button = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data=f"delete_{profile['user_id']}")]
            ]
        )

        sent_message = await bot.send_message(
            chat_id=PARTY_GROUP_ID,
            message_thread_id=TOPIC_ID,
            text=f"üîî –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ –∏—â–µ—Ç –ø–∞—Ç–∏!\n\n{format_profile(profile)}",
            reply_markup=delete_button
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è
        profile["post_message_id"] = sent_message.message_id
        save_profiles(profiles)

        message_link = f"https://t.me/c/{str(PARTY_GROUP_ID)[4:]}/{sent_message.message_id}"
        await message.answer(f"‚úÖ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!\nüîó {message_link}")

# ---------- –£–î–ê–õ–ï–ù–ò–ï –ê–ù–ö–ï–¢–´ ----------
@dp.callback_query(lambda c: c.data.startswith("delete_"))
async def delete_profile_post(callback: types.CallbackQuery):
    user_id_in_callback = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    if user_id != user_id_in_callback:
        await callback.answer("‚õî –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞!", show_alert=True)
        return

    profiles = load_profiles()
    profile = next((p for p in profiles if p["user_id"] == user_id), None)
    if not profile or "post_message_id" not in profile:
        await callback.answer("‚ö†Ô∏è –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
        return

    try:
        await bot.delete_message(chat_id=PARTY_GROUP_ID, message_id=profile["post_message_id"])
        profile.pop("post_message_id", None)
        save_profiles(profiles)
        await callback.message.answer("üóë –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —á–∞—Ç–∞.")
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")

# ---------- INLINE ----------
@dp.callback_query(lambda c: c.data == "clear_profile")
async def clear_profile(callback: types.CallbackQuery):
    profiles = load_profiles()
    profiles = [p for p in profiles if p["user_id"] != callback.from_user.id]
    save_profiles(profiles)
    await callback.message.edit_text("üóë –ü—Ä–æ—Ñ–∏–ª—å –æ—á–∏—â–µ–Ω.")
    await callback.answer("–£–¥–∞–ª–µ–Ω–æ!")

@dp.callback_query(lambda c: c.data == "edit_profile")
async def edit_profile(callback: types.CallbackQuery):
    await callback.message.answer("–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π /start –∑–∞–Ω–æ–≤–æ.")
    await callback.answer()

# ---------- –ó–ê–ü–£–°–ö ----------
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

